REM
REM Trek for Petitcom
REM
REM Version 0.3.2,
REM               2012-07-29
REM     by @gust_notch (Twitter)
REM
'
REM
REM INITIALIZE
REM
@INIT
'  CLEAR ALL
CLEAR
VISIBLE 1,1,0,0,1,1
BGMSTOP
PNLTYPE "OFF"
GPAGE 1:GCOLOR 0:GCLS
GPAGE 0:GCOLOR 0:GCLS
SPPAGE 1:SPCLR
SPPAGE 0:SPCLR
CHRINIT "SPU2"
CHRINIT "SPU3"
COLOR 0:CLS
SCRN_W=32:SCRN_H=24
'  TEXT COLOR
TC_WHITE=0:TC_BLK=1:TC_RED =13
TC_GRN  =4:TC_YEL=3:TC_BLUE=11
T_COL=TC_WHITE
'  GRAPHICS COLOR
GC_WHITE=15:GC_BLK=0:GC_ORNG=8
GC_BRWN = 7:GC_RED=2:GC_PRPL=3
G_COL=GC_WHITE
'  BUTTON ALIAS
BTN_XU=  1:BTN_XD=  2:BTN_XL =   4:BTN_XR=   8
BTN_A = 16:BTN_B = 32:BTN_X  =  64:BTN_Y = 128
BTN_L =256:BTN_R =512:BTN_SEL=1024:BTN_ST=2048
'  LINE BUFFER FOR CONSOLE
DIM BUF$(14),BUF_COL(14)
BLANK$=" "*23
'  SCREEN BUTTONS
BTNNUM=21
DIM BTNXY(BTNNUM,2),BTNWH(BTNNUM,2),BTNCOL(BTNNUM)
DIM BTNT$(BTNNUM),BTNTXY(BTNNUM,2)
DIM BTNUDLR(BTNNUM,4)
BTN_WAR=0:BTN_LRS=1:BTN_PHA=2:BTN_PHO=3
BTN_SHI=4:BTN_DAM=5:BTN_COM=6:BTN_CAN=7
BTN_7= 8:BTN_8= 9:BTN_9=10
BTN_4=11:BTN_5=12:BTN_6=13
BTN_1=14:BTN_2=15:BTN_3=16
BTN_0=17:BTN_DOT=18:BTN_BS=19
BTN_RET=20
CUR_BTN=0:LST_BTN=0
'  TITLE DATA
DIM T_LOGO(20,2) :' vertex's x,y. up to 20 points for a letter. reused.
INST_L=0         :' line counter for instructions
DIM INST$(150)   :' instructins must be up to 150 lines
'  GAME DATA
TRLABEL$="#TR"
ENLABEL$="#EN"
KLLABEL$="#KL"
TR$="TREK"      :' title
EN$="ENTERPRIZE":' 10 charas or less
KL$="KLILIN"    :' 7 charas or less
SYM_E$="E"
SYM_K$="K"
SYM_B$="B"
SYM_S$="*"
SYM__$="."
RESTORE @MGC
MAGIC$=""
MAGIC2$=""
FOR I=0 TO 8:READ M:MAGIC$=MAGIC$+CHR$(M-113):NEXT I
FOR I=0 TO 6:READ M:MAGIC2$=MAGIC2$+CHR$(M-111):NEXT I
@MGC
DATA 196,197,178,195,145,197,195,182,188
DATA 186,187,184,189,182,190,189
IF TR$==MAGIC$ THEN KL$=MAGIC2$
DIM G(8,8)   :' galaxy info
DIM C(10,2)  :' course info
DIM K(3,3)   :' klilin's x,y,energy
DIM Z(8,8)   :' galaxy map status
DIM D(8)     :' status of devices
DIM LD(8)    :' last status of devices
DIM D$(8)    :' device names
DIM Q$(8,8)  :' status of quadrant
DIM LBL$(10) :' labels of SRS
DIM KBS$(3)  :' 3 letters in galaxy map
'  SOUND
PITCH=4096/12
'  SPRITE
SP_TOR=0:SP_BOMB=1:SP_HIT=2
' GAME TYPE
K_NOMOVE=0 :' klilins are static
K_MOVE=1   :' klilins move around
G_TYPE=K_MOVE
'
REM
REM TITLE AND INSTRUCTION
REM
'  TITLE
GOSUB @TITLE
' 
REM
REM GAME
REM
'  GLOBAL INITIALIZE
L=0
GOSUB @INIT_BTN
GOSUB @INIT_SP
GOSUB @DRAWSCRN
GOSUB @INIT_G
GOSUB @INIT_M
GOSUB @SET_M
GOSUB @SET_Q
'  DRAW
GOSUB @GMAP
GOSUB @SRS
GOSUB @STATUS
'  MAIN
@MAINLOOP
 LINE$="COMMAND :":GOSUB @ADD_LINE
 @WAIT_COM
 GOSUB @IN_COM
 IF COM_N<0 OR COM_N>6 THEN @WAIT_COM
 ON COM_N GOSUB @WARP,@LRS,@PHASER,@PHOTON,@SHIELD,@DAMAGE,@COMP 
 GOSUB @GMAP
 GOSUB @SRS
 GOSUB @STATUS
 WAIT 1
GOTO @MAINLOOP
'
REM
REM SUBROUTINES
REM
'
REM
REM SHOW TITLE
REM
@TITLE
'  SCREEN 0
IF TR$!=MAGIC$ THEN RESTORE @T_DATA2:GOTO @T_TREK
GPAGE 0
@T_STAR
' V: number of vertexs of region
GCOLOR GC_ORNG
V=19:GOSUB @T_DRAW:GOSUB @T_PAINT:'S
V= 7:GOSUB @T_DRAW:GOSUB @T_PAINT:'T
V= 9:GOSUB @T_DRAW:GOSUB @T_PAINT:'A
GCOLOR GC_BLK
V= 3:GOSUB @T_DRAW:GOSUB @T_PAINT
GCOLOR GC_ORNG
V=10:GOSUB @T_DRAW:GOSUB @T_PAINT:'R
GCOLOR GC_BLK
V= 3:GOSUB @T_DRAW:GOSUB @T_PAINT
@T_TREK
GCOLOR GC_ORNG
V= 7:GOSUB @T_DRAW:GOSUB @T_PAINT:'T
V=10:GOSUB @T_DRAW:GOSUB @T_PAINT:'R
GCOLOR GC_BLK
V= 3:GOSUB @T_DRAW:GOSUB @T_PAINT
GCOLOR GC_ORNG
V=11:GOSUB @T_DRAW:GOSUB @T_PAINT:'E
V=15:GOSUB @T_DRAW:GOSUB @T_PAINT:'K
GCOLOR GC_BLK
LOCATE 0,17:PRINT"П: SCROLL INSTRUCTIONS"
LOCATE 0,19:PRINT"А: START GAME"
LOCATE 0,20:PRINT"   ("+KL$+"S MOVE IN A QUADRANT)"
LOCATE 0,22:PRINT"Б: START GAME"
LOCATE 0,23:PRINT"   ("+KL$+"S ARE STATIC)"
'  SCREEN 1
'  READ INSTRUCTIONS DATA
RESTORE @INST_DAT
@INSTLOOP
 READ TMP
 IF TMP==0 THEN @INST_END
 INST_L=INST_L+1
 READ TMP$
 TMP_POS=INSTR(TMP$,TRLABEL$)
 IF TMP_POS != -1 AND TR$==MAGIC$ THEN TMP$=SUBST$(TMP$,TMP_POS,LEN(TRLABEL$),TR$)
 IF TMP_POS != -1 AND TR$!=MAGIC$ THEN TMP$=SUBST$(TMP$,TMP_POS,LEN("   TREK"),"   TREK")
 TMP_POS=INSTR(TMP$,ENLABEL$)
 IF TMP_POS != -1 THEN TMP$=SUBST$(TMP$,TMP_POS,LEN(ENLABEL$),EN$)
 TMP_POS=INSTR(TMP$,KLLABEL$)
 IF TMP_POS != -1 THEN TMP$=SUBST$(TMP$,TMP_POS,LEN(KLLABEL$),KL$)
 INST$(INST_L)=TMP$
GOTO @INSTLOOP
@INST_END
'  TITLE LOOP
L=0 :' L: current top-line
@T_LOOP
 BTN=BUTTON()
 IF BTN AND BTN_A THEN G_TYPE=K_MOVE:RETURN
 IF BTN AND BTN_B THEN G_TYPE=K_NOMOVE:RETURN
 IF BTN AND BTN_XU THEN L=L-1
 IF L<0 THEN L=0
 IF BTN AND BTN_XD THEN L=L+1
 IF L>(INST_L)-(SCRN_H-1) THEN L=(INST_L)-(SCRN_H-1)
 GOSUB @P_INST
GOTO @T_LOOP
'  PRINT INSTRUCTION
@P_INST
FOR I=0 TO SCRN_H-1
 PNLSTR 0,I,"                                "
 PNLSTR 0,I,INST$(L+I)
NEXT I
WAIT 1
RETURN
'
@T_DRAW
IF TR$==MAGIC$ THEN SFT=0 ELSE SFT=50
FOR I=0 TO V
 READ T_LOGO(I,0)
 READ T_LOGO(I,1)
NEXT I
FOR I=0 TO V-1
 GLINE T_LOGO(I,0)-SFT,T_LOGO(I,1),T_LOGO(I+1,0)-SFT,T_LOGO(I+1,1)
NEXT I
GLINE T_LOGO(V,0)-SFT,T_LOGO(V,1),T_LOGO(0,0)-SFT,T_LOGO(0,1)
RETURN
'
@T_PAINT
GPAINT T_LOGO(0,0)-SFT+1,T_LOGO(0,1)+1
RETURN
'
REM
REM INITIALIZE BUTTONS
REM
@INIT_BTN
RESTORE @BTNDATA
FOR I=0 TO BTNNUM-1
 READ BTNXY(I,0)
 READ BTNXY(I,1)
 READ BTNWH(I,0)
 READ BTNWH(I,1)
 READ BTNCOL(I)
 READ BTNT$(I)
 READ BTNTXY(I,0)
 READ BTNTXY(I,1)
 READ BTNUDLR(I,0)
 READ BTNUDLR(I,1)
 READ BTNUDLR(I,2)
 READ BTNUDLR(I,3)
NEXT I
RETURN
'
REM
REM DRAW GRAPHICS AND BUTTONS
REM
@DRAWSCRN
CLS
GPAGE 1:GCLS
GPAGE 0:GCLS
GU=8 :' graphics unit of text
GOSUB @G_SCRN0
GOSUB @G_SCRN1
RETURN
'
'  DRAW SCREEN 0
@G_SCRN0
GPAGE 0
G_COL=GC_PRPL
GTLX=0:GTLY=0:GW=6
GOSUB @BORDER1
GTLX=0:GTLY=11
GOSUB @BORDER1
GTLX=0:GTLY=13
GFILL GTLX*GU,GTLY*GU-2,GTLX*GU+GW*GU-1,GTLY*GU+GU-2,G_COL
GTLX=18:GTLY=12:GW=8
GOSUB @BORDER1
GTLX=18:GTLY=14
FOR I=0 TO 9
 GFILL GTLX*GU,(GTLY+I)*GU,GTLX*GU+GW*GU-1,(GTLY+I)*GU+GU-2,G_COL
NEXT I
RETURN
'
'  DRAW SCREEN 1
@G_SCRN1
GPAGE 1
GOSUB @DRAW_BTN
G_COL=GC_PRPL
GTLX=0:GTLY=0
GOSUB @BORDER1
GTLX=0:GTLY=16
GOSUB @BORDER2
GOSUB @CURSOR
RETURN
'
'  BORDER1
@BORDER1
GFILL GTLX*GU+GU,GTLY*GU,256,GTLY*GU+GU-2,G_COL
GFILL GTLX*GU,GTLY*GU+GU-1,GTLX*GU+GW*GU-1,GTLY*GU+GU*2-2,G_COL
GCIRCLE GTLX*GU+GU-1,GTLY*GU+GU-2,GU-2,G_COL,90,180
GCIRCLE GTLX*GU+GW*GU+GU-3,GTLY*GU+GU*2-4,GU-2,G_COL,90,180
GPAINT GTLX*GU+GU-1,GTLY*GU+GU-2,G_COL
GPAINT GTLX*GU+GW*GU,GTLY*GU+GU-1,G_COL
RETURN
'
'  BORDER2
@BORDER2
GFILL GTLX*GU+GU,GTLY*GU+GU,256,GTLY*GU+GU*2-2,G_COL
GFILL GTLX*GU,GTLY*GU+1,GTLX*GU+GW*GU-1,GTLY*GU+GU-1,G_COL
GCIRCLE GTLX*GU+GU-1,GTLY*GU+GU,GU-2,G_COL,180,270
GCIRCLE GTLX*GU+GW*GU+GU-3,GTLY*GU+2,GU-2,G_COL,180,270
GPAINT GTLX*GU+GU-1,GTLY*GU+GU,G_COL
GPAINT GTLX*GU+GW*GU,GTLY*GU+GU-1,G_COL
RETURN
'
'  DRAW BUTTONS
@DRAW_BTN
GPAGE 1:GCOLOR GC_BLK:GCLS
FOR I=0 TO BTNNUM-1
 GTLX=BTNXY(I,0)
 GTLY=BTNXY(I,1)
 GW=BTNWH(I,0)
 GH=BTNWH(I,1)
 G_COL=BTNCOL(I)
 GOSUB @G_BTN
 PNLSTR BTNTXY(I,0),BTNTXY(I,1),BTNT$(I),TC_BLK
NEXT I
PNLSTR 24,1,"[     ]",TC_WHITE
RETURN
'
'  DRAW A BUTTON
@G_BTN
GFILL GTLX*GU+GU,GTLY*GU+GU,GTLX*GU+(GW-1)*GU-1,GTLY*GU+(GH-1)*GU-1,G_COL
GFILL GTLX*GU+GU,GTLY*GU+1,GTLX*GU+(GW-1)*GU-1,GTLY*GU+GU-1,G_COL
GFILL GTLX*GU+1,GTLY*GU+GU,GTLX*GU+GU-1,GTLY*GU+(GH-1)*GU-1,G_COL
GFILL GTLX*GU+(GW-1)*GU,GTLY*GU+GU,GTLX*GU+GW*GU-2,GTLY*GU+(GH-1)*GU-1,G_COL
GFILL GTLX*GU+GU,GTLY*GU+(GH-1)*GU,GTLX*GU+(GW-1)*GU-1,GTLY*GU+GH*GU-2,G_COL
GCIRCLE GTLX*GU+GU-1,GTLY*GU+GU-1,GU-2,G_COL,90,180
GCIRCLE GTLX*GU+(GW-1)*GU,GTLY*GU+GU-1,GU-2,G_COL,0,90
GCIRCLE GTLX*GU+GU-1,GTLY*GU+(GH-1)*GU,GU-2,G_COL,180,270
GCIRCLE GTLX*GU+(GW-1)*GU,GTLY*GU+(GH-1)*GU,GU-2,G_COL,270,360
GPAINT GTLX*GU+GU-1,GTLY*GU+GU-1,G_COL
GPAINT GTLX*GU+(GW-1)*GU,GTLY*GU+GU-1,G_COL
GPAINT GTLX*GU+GU-1,GTLY*GU+(GH-1)*GU,G_COL
GPAINT GTLX*GU+(GW-1)*GU,GTLY*GU+(GH-1)*GU,G_COL
RETURN
'
'  DRAW CURSOR
@CURSOR
GTLX=BTNXY(LST_BTN,0)
GTLY=BTNXY(LST_BTN,1)
GW=BTNWH(LST_BTN,0)
GH=BTNWH(LST_BTN,1)
G_COL=GC_BLK
GOSUB @WAKU
GTLX=BTNXY(CUR_BTN,0)
GTLY=BTNXY(CUR_BTN,1)
GW=BTNWH(CUR_BTN,0)
GH=BTNWH(CUR_BTN,1)
G_COL=GC_RED
GOSUB @WAKU
RETURN
'  WAKU
@WAKU
GBOX GTLX*GU,GTLY*GU,GTLX*GU+3,GTLY*GU+1,G_COL
GBOX GTLX*GU,GTLY*GU,GTLX*GU+1,GTLY*GU+3,G_COL
GBOX GTLX*GU+GW*GU-4,GTLY*GU,GTLX*GU+GW*GU-1,GTLY*GU+1,G_COL
GBOX GTLX*GU+GW*GU-2,GTLY*GU,GTLX*GU+GW*GU-1,GTLY*GU+3,G_COL
GBOX GTLX*GU,GTLY*GU+GH*GU-4,GTLX*GU+1,GTLY*GU+GH*GU-1,G_COL
GBOX GTLX*GU,GTLY*GU+GH*GU-2,GTLX*GU+3,GTLY*GU+GH*GU-1,G_COL
GBOX GTLX*GU+GW*GU-4,GTLY*GU+GH*GU-2,GTLX*GU+GW*GU-1,GTLY*GU+GH*GU-1,G_COL
GBOX GTLX*GU+GW*GU-2,GTLY*GU+GH*GU-4,GTLX*GU+GW*GU-1,GTLY*GU+GH*GU-1,G_COL
RETURN
'
REM
REM INITIALIZE SPRITE
REM
@INIT_SP
SPPAGE 0
SP$=""
FOR I=0 TO 63
 SP$=SP$+"0"
NEXT I
FOR I=0 TO 3
 CHRSET "SPU3",96+I,SP$
 CHRSET "SPU3",252+I,SP$
 CHRSET "SPU2",64+I,SP$
NEXT I
SPSET SP_TOR,214,0,0,0,0
SPOFS SP_TOR,-100,-100
SPSET SP_BOMB,248,0,0,0,0
SPOFS SP_BOMB,-100,-100
SPSET SP_HIT,142,0,0,0,1
SPOFS SP_HIT,-100,-100
RETURN
'
REM
REM INITIALIZE GAME
REM
@INIT_G
FV=1 :' first visit flag for cond. red
FV2=1:' first visit flag for klilin's move
T0=2200+RND(63) :' start year
T=T0
T9=30      :' mission years
D0=0       :' docked status
E0=3000    :' initial energy
E=E0
P0=10      :' initial torpedos
P=P0
S9=200     :' klilin's initial energy
S=0        :' shield
Q1=RND(8)  :' quadrant x
Q2=RND(8)  :' quadrant y
S1=RND(8)  :' sector x
S2=RND(8)  :' sector y
TMREAD(TIME$),HOUR,MIN,SEC
T7=MIN+60*HOUR :' start time in minutes
'  COURSE VECTOR
RESTORE @COURSE
FOR I=1 TO 9
 FOR J=0 TO 1
  READ C(I,J)
 NEXT J
NEXT I
'  DEVICE NAMES
RESTORE @DEV_NAME
FOR I=0 TO 7
 READ D$(I)
NEXT I
'  SRS LABELS
RESTORE @SRS_LBL
FOR I=0 TO 9
 READ TMP$
 TMP_POS=INSTR(TMP$,KLLABEL$)
 IF TMP_POS != -1 THEN LBL$(I)=KL$+"S" ELSE LBL$(I)=TMP$
NEXT I
RETURN
'
REM
REM INITIALIZE MISSION
REM
@INIT_M
B9=0 :' number of bases
K9=0 :' rest of klilins
FOR J=0 TO 7
 FOR I=0 TO 7
  '  KLILINS
  R1=RND(100)
  IF R1<=80 THEN K3=0
  IF R1>80 THEN K3=1
  IF R1>95 THEN K3=2
  IF R1>98 THEN K3=3
  K9=K9+K3
  '  BASES
  R1=RND(100)
  IF R1>96 THEN B3=1
  IF R1<=96 THEN B3=0
  B9=B9+B3
  '  STARS
  S3=RND(8)+1
  G(I,J)=K3*100+B3*10+S3
  Z(I,J)=0
 NEXT I
NEXT J
K7=K9 :' K7: initial number of klilins
IF B9<=0 OR K9<=0 THEN @INIT_M
RETURN
'
REM
REM ADD TO CONSOLE BUFFER
REM
@ADD_LINE
LENGTH=LEN(LINE$)
IF LENGTH>23 THEN LINE$=MID$(LINE$,0,23)
BUF$(L)=LINE$:BUF_COL(L)=LINE_C
L=L+1
IF L>13 THEN L=0
GOSUB @CONSOLE
RETURN
'
REM
REM EXTEND LAST LINE
REM
@EXT_LINE
LST_LINE=L-1
IF LST_LINE==-1 THEN LST_LINE=13
BUF$(LST_LINE)=BUF$(LST_LINE)+ELINE$
LENGTH=LEN(BUF$(LST_LINE))
IF LENGTH>23 THEN BUF$(LST_LINE)=MID$(BUF$(LST_LINE),0,23)
GOSUB @CONSOLE
RETURN
'
REM
REM PRINT CONSOLE
REM
@CONSOLE
GOSUB @CLS_CON
C_LINE=0
FOR CL=L TO 13
 PNLSTR 0,2+C_LINE,BUF$(CL),BUF_COL(CL)
 C_LINE=C_LINE+1
NEXT CL
FOR CL=0 TO L-1
 PNLSTR 0,2+C_LINE,BUF$(CL),BUF_COL(CL)
 C_LINE=C_LINE+1
NEXT CL
WAIT 1
RETURN
'
REM
REM CLEAR CONSOLE
REM
@CLS_CON
FOR CL=0 TO 13
 PNLSTR 0,2+CL,BLANK$
NEXT CL
RETURN
'
REM
REM SET MISSION MESSAGE
REM
@SET_M
LINE_C=TC_YEL
LINE$="YOUR MISSION:":GOSUB @ADD_LINE
LINE_C=TC_WHITE
LINE$=" YOU MUST DESTROY":GOSUB @ADD_LINE
LINE$=" "+STR$(K9)+" "+KL$+"S":GOSUB @ADD_LINE
LINE$=" IN "+STR$(T9)+" STARDATES":GOSUB @ADD_LINE
LINE$=" WITH "+STR$(B9)+" STARBASES":GOSUB @ADD_LINE
LINE$="":GOSUB @ADD_LINE
RETURN
'
REM
REM SET QUADRANT DATA
REM
@SET_Q
FV=1:FV2=1
K3=0:B3=0:S3=0
IF Q1<0 OR Q1>7 OR Q2<0 OR Q2>7 THEN @SET_EKBS
X=G(Q1,Q2)
K3=FLOOR(X/100)
B3=FLOOR(X/10)-K3*10
S3=X-K3*100-B3*10
'  SET ENTERPRIZE,KLILINS,BASES,STARS
@SET_EKBS
'  INIT QUADRANT WITH SPACE
FOR J=0 TO 7
 FOR I=0 TO 7
  Q$(I,J)=SYM__$
 NEXT I
NEXT J
'  CLEAR KLILINS PARAM
FOR I=0 TO 2
 K(I,0)=0
 K(I,1)=0
 K(I,2)=0
NEXT I
'  PUT ENTERPRIZE
Q$(S1,S2)=SYM_E$
' PUT KLILINS
FOR I=0 TO K3-1
 GOSUB @FND_SPC
 Q$(R1,R2)=SYM_K$
 K(I,0)=R1
 K(I,1)=R2
 K(I,2)=S9
NEXT I
'  PUT BASE
FOR I=0 TO B3-1
 GOSUB @FND_SPC
 Q$(R1,R2)=SYM_B$
NEXT I
'  STAR
FOR I=0 TO S3-1
 GOSUB @FND_SPC
 Q$(R1,R2)=SYM_S$
NEXT I
'  CHECK DOCKED
GOSUB @CHK_DOCK
RETURN
'
REM
REM FIND SPACE
REM
@FND_SPC
R1=RND(8)
R2=RND(8)
IF Q$(R1,R2)!=SYM__$ THEN @FND_SPC
RETURN
'
REM
REM CHECK DOCKED
REM
@CHK_DOCK
D0=0
FOR JJ=S2-1 TO S2+1
 FOR II=S1-1 TO S1+1
  FLAG=0
  IF II<0 OR II>7 OR JJ<0 OR JJ>7 THEN FLAG=1
  IF FLAG==0 THEN IF Q$(II,JJ)==SYM_B$ THEN D0=1
 NEXT II
NEXT JJ
IF D0==0 THEN GOSUB @NOT_DKD
IF D0==1 THEN GOSUB @DKD
RETURN
'
REM
REM NOT DOCKED
REM
@NOT_DKD
IF K3>0 THEN GOSUB @CND_RED:RETURN
IF E<E0/10 THEN GOSUB @CND_YEL:RETURN
IF K3<0 OR E>=E0/10 THEN GOSUB @CND_GRN
RETURN
'
REM
REM CONDITION RED
REM
@CND_RED
IF FV==1 THEN GOSUB @RED_MSG:FV=0
IF S<200 THEN GOSUB @LOW_MSG
C$="RED"
RETURN
'
REM
REM MESSAGE: CONDITION RED
REM
@RED_MSG
GOSUB @SND_WARN
LINE_C=TC_RED
LINE$="":GOSUB @ADD_LINE
LINE$="COMBAT AREA!":GOSUB @ADD_LINE
LINE$="CONDITION RED":GOSUB @ADD_LINE
LINE$=STR$(K3)+" "+KL$
IF K3>1 THEN LINE$=LINE$+"S"
LINE$=LINE$+" HERE":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: LOW SHIELD
REM
@LOW_MSG
GOSUB @SND_NTC
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="SHIELD IS":GOSUB @ADD_LINE
LINE$="DANGEROUSLY LOW":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM CONDITION YELLOW
REM
@CND_YEL
C$="YEL"
RETURN
'
REM
REM CONDITION GREEN
REM
@CND_GRN
C$="GRN"
RETURN
'
REM
REM DOCKED
REM
@DKD
GOSUB @DKD_MSG
C$="DKD"
E=3000
P=10
S=0
FOR I=0 TO 7
 IF D(I)<0 THEN D(I)=0
NEXT I
RETURN
'
REM
REM MESSAGE: DOCKED STATUS
REM
@DKD_MSG
GOSUB @SND_DCK
LINE_C=TC_BLUE
LINE$="":GOSUB @ADD_LINE
LINE$="SHIELDS DROPPED":GOSUB @ADD_LINE
LINE$="FOR DOCKING PURPOSES.":GOSUB @ADD_LINE
LINE$="ALL DAMAGED DEVICES":GOSUB @ADD_LINE
LINE$="ARE REPAIRED.":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM WARP
REM
@WARP
ELINE$="WARP":GOSUB @EXT_LINE
@W_IN_CRS
GOSUB @IN_CRS
IF C1==0 THEN GOSUB @CNCL_MSG:RETURN
IF C1<1 OR C1>=9 THEN GOSUB @SND_BAD:GOTO @W_IN_CRS
@W_IN_FCT
GOSUB @IN_FCT
IF W1==-1 THEN GOSUB @CNCL_MSG:RETURN
IF W1<0 OR W1>8 THEN GOSUB @SND_BAD:GOTO @W_IN_FCT
IF D(0)>=0 OR W1<=0.2 THEN @TRY_WARP
GOSUB @WARPDOWN
GOTO @W_IN_CRS
'  TRY WARP
@TRY_WARP
IF E-FLOOR(W1*8)+5<0 THEN GOSUB @LE_MSG:RETURN
'  KLILIN'S ATTACK
IF K3<=0 THEN @CHK_ES
GOSUB @K_ATTACK
IF S<0 THEN @END_DSTR
@CHK_ES
IF E>0 THEN GOSUB @REPAIR:RETURN
IF S<1 THEN @END_STAC
GOSUB @LE_MSG
RETUEN
'
REM
REM INPUT: WARP COURSE
REM
@IN_CRS
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="WARP OPERATION":GOSUB @ADD_LINE
LINE$="COURSE (1-9): ":GOSUB @ADD_LINE
@IN_CRS_L
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN C1=0:RETURN
IF IN$=="" THEN GOSUB @SND_BAD:GOTO @IN_CRS_L
ELINE$=IN$
GOSUB @EXT_LINE
C1=VAL(IN$)
RETURN
'
REM
REM INPUT: WARP FACTOR
REM
@IN_FCT
LINE_C=TC_WHITE
IF D(0)>=0 THEN LINE$="FACTOR (0-8): "
IF D(0)<0 THEN LINE$="FACTOR (0-0.2): "
GOSUB @ADD_LINE
@IN_FCT_L
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN W1=-1:RETURN
IF IN$=="" THEN GOSUB @SND_BAD:GOTO @IN_FCT_L
ELINE$=IN$
GOSUB @EXT_LINE
W1=VAL(IN$)
RETURN
'
REM
REM MESSAGE: LOW ENERGY FOR WAFP
REM
@LE_MSG
GOSUB @SND_NTC
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="YOU HAVE "+STR$(E):GOSUB @ADD_LINE
LINE$="UNITS OF ENERGY.":GOSUB @ADD_LINE
LINE$="SUGGEST YOU GET":GOSUB @ADD_LINE
LINE$="SOME FROM YOUR":GOSUB @ADD_LINE
LINE$="SHIELDS WHICH HAVE":GOSUB @ADD_LINE
LINE$=STR$(S)+" UNITS LEFT.":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM REPAIR DEVICES AND MOVE
REM
@REPAIR
GOSUB @SND_WARP
FOR I=0 TO 7
 LD(I)=D(I)
 IF D(I)>=0 THEN D(I)=D(I)+0
 IF D(I)< 0 THEN D(I)=D(I)+1
 IF LD(I)<0 AND D(I)>0 THEN R1=I:GOSUB @IMP_MSG
NEXT I
IF RND(100)>20 THEN @SPOS
R1=RND(8)
R2=RND(100)
IF R2> 49 THEN D(R1)=D(R1)+(RND(501)/100):GOSUB @IMP_MSG
IF R2<=49 THEN D(R1)=D(R1)-(RND(501)/100):GOSUB @DAM_MSG
'  CALC SECTOR POSITION
@SPOS
N=FLOOR(W1*8)
Q$(S1,S2)=SYM__$
X=S1
Y=S2
C2=FLOOR(C1)
X1=C(C2,0)+(C(C2+1,0)-C(C2,0))*(C1-C2)
X2=C(C2,1)+(C(C2+1,1)-C(C2,1))*(C1-C2)
FLAG=0
FOR U=0 TO N-1
 S1=S1+X1
 S2=S2+X2
 IF S1<-0.5 OR S1>=7.5 OR S2<-0.5 OR S2>=7.5 THEN GOSUB @QPOS:FLAG=1:U=N:GOTO @NEXT_N
 SX=FLOOR(S1+0.5)
 SY=FLOOR(S2+0.5)
 IF Q$(SX,SY)==SYM__$ THEN @NEXT_N
 BLKOBJ$=Q$(SX,SY)
 GOSUB @BAD_MSG
 S1=S1-X1
 S2=S2-X2
 GOSUB @BLOCKED:FLAG=1:U=N
 @NEXT_N
NEXT U
IF FLAG==1 THEN IF K3>0 THEN GOSUB @K_MOVE:RETURN ELSE RETURN
S1=FLOOR(S1)
S2=FLOOR(S2)
Q$(S1,S2)=SYM_E$
GOSUB @CHK_DOCK
IF K3>0 THEN GOSUB @K_MOVE
RETURN
'
REM
REM WARP IS BLOCKED
REM
@BLOCKED
GOSUB @SND_BAD
S1=FLOOR(S1+0.5)
S2=FLOOR(S2+0.5)
Q$(S1,S2)=SYM_E$
E=E-N+5
IF W1< 1 THEN T=T+0
IF W1>=1 THEN T=T+1
IF T>T0+T9 THEN @END_OVER
GOSUB @CHK_DOCK
RETURN
'
REM
REM SET QUADRANT POSITION
REM
@QPOS
X=Q1*8+X+X1*N
Y=Q2*8+Y+X2*N
Q1=FLOOR(X/8)
Q2=FLOOR(Y/8)
S1=FLOOR(X-Q1*8+0.5)
S2=FLOOR(Y-Q2*8+0.5)
IF S1==-1 THEN Q1=Q1-1:S1=7
IF S2==-1 THEN Q2=Q2-1:S2=7
IF S1==8 THEN Q1=Q1+1:S1=0
IF S2==8 THEN Q2=Q2+1:S2=0
Q$(S1,S2)=SYM_E$
T=T+1
E=E-N+5
IF T>T0+T9 THEN @END_OVER
GOSUB @SET_Q
RETURN
'
REM
REM MESSAGE: WARP IS DOWN
REM
@WARPDOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="WARP ENGINES DAMAGED,":GOSUB @ADD_LINE
LINE$="MAX SPEED = WARP 0.2":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: DAMAGED
REM
@DAM_MSG
GOSUB @SND_DAM
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="DAMAGE CONTROL REPORT:":GOSUB @ADD_LINE
LINE$=" "+D$(R1)+" DAMAGED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: IMPROVED
REM
@IMP_MSG
IF LD(R1)>=0 THEN RETURN
GOSUB @SND_IMP
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="DAMAGE CONTROL REPORT:":GOSUB @ADD_LINE
LINE$=" "+D$(R1):GOSUB @ADD_LINE
LINE$=" REPAIR COMPLETED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: BAD NAVIGATION
REM
@BAD_MSG
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="WARP ENGINES SHUTDOWN":GOSUB @ADD_LINE
IF BLKOBJ$==SYM_S$ THEN BLK$="STAR"
IF BLKOBJ$==SYM_K$ THEN BLK$=KL$
IF BLKOBJ$==SYM_B$ THEN BLK$="BASE"
LINE$=" AT SECTOR "+STR$(SX+1)+","+STR$(SY+1)+"("+BLK$+")":GOSUB @ADD_LINE
LINE$=" DUE TO BAD NAVIGATION":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM SHORT RANGE SENSOR SCAN
REM
@SRS
GOSUB @SRS_BASE
FOR I=0 TO 7
 LOCATE 2,15+I
 PRINT " "*16
NEXT I
IF D(1)>=0 THEN GOSUB @SRS_PRNT
IF D(1)< 0 THEN GOSUB @SRS_DOWN
RETURN
'
REM
REM SHORT RANGE SENSOR COMMON BASE
REM
@SRS_BASE
COLOR TC_YEL
FOR I=0 TO 7
 LOCATE 2+2*I,14:PRINT I+1;
 LOCATE 0,15+I:PRINT I+1;
NEXT I
COLOR TC_BLK
FOR I=0 TO 9
 LOCATE 18,14+I:PRINT LBL$(I);
NEXT I
COLOR TC_WHITE
FOR I=0 TO 7
 LOCATE 27,15+I:PRINT "     ";
NEXT I
LOCATE 27,14:PRINT T;
LOCATE 27,15:GOSUB @PRNT_CND
LOCATE 27,16:PRINT Q1+1;",";Q2+1
LOCATE 27,17:PRINT S1+1;",";S2+1
LOCATE 27,18:PRINT E;
LOCATE 27,19:PRINT P;
LOCATE 27,20:PRINT S;
RETURN
'
REM
REM PRINT CONDITION IN SRS
REM
@PRNT_CND
IF C$=="DKD" THEN COLOR TC_BLUE
IF C$=="RED" THEN COLOR TC_RED
IF C$=="YEL" THEN COLOR TC_YEL
IF C$=="GRN" THEN COLOR TC_GRN
PRINT C$;
COLOR TC_WHITE
RETURN
'
REM
REM SHORT RANGE SENSORS SCAN IS DOWN
REM
@SRS_DOWN
COLOR TC_YEL
LOCATE 4,16
PRINT "SHORT RANGE";
LOCATE 4,17
PRINT "  SENSORS";
LOCATE 4,18
PRINT "  ARE OUT";
COLOR TC_WHITE
RETURN
'
REM
REM PRINT SHORT RANGE SENSORS SCAN
REM
@SRS_PRNT
FOR J=0 TO 7
 FOR I=0 TO 7
  COLOR TC_WHITE
  IF Q$(I,J)==SYM_E$ THEN COLOR TC_YEL
  IF Q$(I,J)==SYM_B$ THEN COLOR TC_BLUE
  IF Q$(I,J)==SYM_K$ THEN COLOR TC_RED
  LOCATE 2+2*I,15+J
  PRINT Q$(I,J);
 NEXT I
NEXT J
RETURN
'
REM
REM LONG RANGE SENSOR SCAN
REM
@LRS
ELINE$="L.R.S.":GOSUB @EXT_LINE
IF D(2)>=0 THEN GOSUB @LRS_PRNT
IF D(2)< 0 THEN GOSUB @LRS_DOWN
RETURN
'
REM
REM MESSAGE: LONG RANGE SENSORS SCAN IS DOWN 
REM
@LRS_DOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="LONG RANGE SENSORS":GOSUB @ADD_LINE
LINE$="ARE INOPERABLE":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM PRINT LONG RANGE SENSORS SCAN
REM
@LRS_PRNT
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="LONG RANGE SENSOR SCAN":GOSUB @ADD_LINE
LINE$="FOR QUADRANT "+STR$(Q1+1)+","+STR$(Q2+1):GOSUB @ADD_LINE
LINE$="-----------":GOSUB @ADD_LINE
FOR J=Q2-1 TO Q2+1
 LINE$=""
 FOR I=Q1-1 TO Q1+1
  IF I<0 OR I>7 OR J<0 OR J>7 THEN KBS$(0)="*":KBS$(1)="*":KBS$(2)="*":GOTO @PRINT_Q
  X=G(I,J)
  GOSUB @X2KBS
  IF D(7)>=0 THEN Z(I,J)=G(I,J)
  @PRINT_Q
  LINE$=LINE$+KBS$(0)+KBS$(1)+KBS$(2)+" "
 NEXT I
 GOSUB @ADD_LINE
NEXT J
LINE$="-----------":GOSUB @ADD_LINE
RETURN
'
REM
REM MAKE KBS$
REM
@X2KBS
KN=FLOOR(X/100)
BN=FLOOR(X/10)-KN*10
SN=X-KN*100-BN*10
KBS$(0)=STR$(KN)
KBS$(1)=STR$(BN)
KBS$(2)=STR$(SN)
RETURN
'
REM
REM PHASER
REM
@PHASER
ELINE$="PHASER":GOSUB @EXT_LINE
IF K3<=0 THEN GOSUB @NO_K:RETURN
IF D(3)>=0 THEN GOSUB @PHA_AT
IF D(3)< 0 THEN GOSUB @PHA_DOWN
RETURN
'
REM
REM NO KLILINS
REM
@NO_K
GOSUB @SND_NTC
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="NO "+KL$+"S":GOSUB @ADD_LINE
LINE$="IN THIS QUADRANT":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: PHASER IS DOWN
REM
@PHA_DOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="PHASER CONTROL":GOSUB @ADD_LINE
LINE$="IS DISABLED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM PHASER ATTACK
REM
@PHA_AT
IF D(7)<0 THEN GOSUB @CDWN_MSG
GOSUB @PHA_MSG
GOSUB @IN_PHA
IF X<=0 THEN GOSUB @CNCL_MSG:RETURN
IF E-X<0 THEN GOSUB @SND_BAD:GOTO @PHA_AT
E=E-X
GOSUB @K_ATTACK

IF D(7)<0 THEN X=FLOOR(X*RND(101)/100)
FOR I=0 TO 2
 IF K(I,2)<=0 THEN @NEXT_K
 DIST=SQR((K(I,0)-S1)*(K(I,0)-S1)+(K(I,1)-S2)*(K(I,1)-S2))
 H=FLOOR((X*1.5*(RND(101)+50))/(K3*DIST*100))
 K(I,2)=K(I,2)-H
 GOSUB @HITK_MSG
 IF K(I,2)> 0 THEN @NEXT_K
 IF K(I,2)<=0 THEN GOSUB @K_DEAD
 IF K9<=0 THEN @END_COMP
 @NEXT_K
NEXT I
IF E<0 THEN Q$(K(I,0),K(I,1))=SYM__$:GOTO @END_DSTR
GOSUB @CHK_DOCK
GOSUB @K_MOVE
RETURN
'
REM
REM MESSAGE: COMPUTER IS DOWN
REM
@CDWN_MSG
GOSUB @SND_NTC
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="COMPUTER FAIL":GOSUB @ADD_LINE
LINE$="HAMPERS ACCURACY":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: ABAILABLE ENERGY
REM
@PHA_MSG
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="PHASER LOCKED ON TARGET":GOSUB @ADD_LINE
LINE$="ENERGY AVAIL.= "+STR$(E):GOSUB @ADD_LINE
RETURN
'
REM
REM INPUT: ENERGY UNIT FOR PHASER
REM
@IN_PHA
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="UNIT TO FIRE: ":GOSUB @ADD_LINE
@IN_PHA_L
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN X=-1:RETURN
IF IN$=="" THEN GOSUB @SND_BAD:GOTO @IN_PHA_L
ELINE$=STR$(FLOOR(VAL(IN$)))
GOSUB @EXT_LINE
X=FLOOR(VAL(IN$))
RETURN
'
REM
REM MESSAGE: HIT KLILIN
REM
@HITK_MSG
HX=K(I,0):HY=K(I,1)
GOSUB @ANIM_HIT
GOSUB @SND_HIT
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$=STR$(H)+" UNIT HIT AT "+STR$(K(I,0)+1)+","+STR$(K(I,1)+1):GOSUB @ADD_LINE
LINE$=" ("+STR$(K(I,2))+" LEFT)":GOSUB @ADD_LINE
LINE_C=TC_WHITE
WAIT 30
RETURN
'
REM
REM PHOTON TORPEDO
REM
@PHOTON
ELINE$="PHOTON":GOSUB @EXT_LINE
IF D(4)>=0 THEN GOSUB @PHO_PRNT
IF D(4)< 0 THEN GOSUB @PHO_DOWN
RETURN
'
REM
REM MESSAGE: PHOTON TUBE IS DOWN
REM
@PHO_DOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="PHOTON TUBES":GOSUB @ADD_LINE
LINE$="ARE NOT OPERATIONAL.":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM PHOTON ATTACK
REM
@PHO_PRNT
IF P> 0 THEN GOSUB @PHO_SHOT
IF P<=0 THEN GOSUB @NOTUBE
RETURN
'
REM
REM MESSAGE: NO PHOTON TUBE
REM
@NOTUBE
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="ALL TORPEDOES EXTENDED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM SHOOT PHOTON TORPEDO
REM
@PHO_SHOT
GOSUB @IN_TCRS
IF C1==0 THEN GOSUB @CNCL_MSG:RETURN
IF C1<1 OR C1>=9 THEN GOSUB @SND_BAD:GOTO @PHO_SHOT
C2=FLOOR(C1)
@TRACK
X1=C(C2,0)+(C(C2+1,0)-C(C2,0))*(C1-C2)
X2=C(C2,1)+(C(C2+1,1)-C(C2,1))*(C1-C2)
X=S1
Y=S2
P=P-1
GOSUB @TRC_MSG
@TRACK_N
X=X+X1
Y=Y+X2
IF X<-0.5 OR X>=7.5 OR Y<-0.5 OR Y>=7.5 THEN @MISSED
SX=FLOOR(X+0.5)
SY=FLOOR(Y+0.5)
GOSUB @CRD_PRNT
DX=SX:DY=SY
IF Q$(SX,SY)==SYM__$ THEN @TRACK_N
IF Q$(SX,SY)==SYM_K$ THEN @K_HIT
IF Q$(SX,SY)==SYM_S$ THEN @S_HIT
IF Q$(SX,SY)==SYM_B$ THEN @B_HIT
@K_HIT
GOSUB @KH_MSG
K3=K3-1
K9=K9-1
IF K9<=0 THEN Q$(DX,DY)=SYM__$:GOTO @END_COMP
FOR I=0 TO 2
IF SX==K(I,0) AND SY==K(I,1) THEN K(I,2)=0:Q$(SX,SY)=SYM__$
NEXT I
GOTO @K_TURN
@S_HIT
GOSUB @SH_MSG
S3=S3-1
Q$(SX,SY)=SYM__$
GOTO @K_TURN
@B_HIT
GOSUB @BH_MSG
B3=B3-1
Q$(SX,SY)=SYM__$
GOTO @K_TURN
@MISSED
GOSUB @MIS_MSG
@K_TURN
GOSUB @K_ATTACK
IF E<0 THEN @END_DSTR
IF Q1<0 OR Q1>7 OR Q2<0 OR Q2>7 THEN RETURN
Q(Q1,Q2)=K3*100+B3*10+S3
G(Q1,Q2)=Q(Q1,Q2)
IF K3<=0 THEN C$="GRN"
GOSUB @CHK_DOCK
GOSUB @K_MOVE
RETURN
'
REM
REM INPUT: TORPEDO COURSE
REM
@IN_TCRS
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="PHOTON TORPEDO":GOSUB @ADD_LINE
LINE$=" COURSE (1-9): ":GOSUB @ADD_LINE
@IN_TC_L
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN C1=0:RETURN
IF IN$=="" THEN GOSUB @SND_BAD:GOTO @IN_TC_L
ELINE$=IN$
GOSUB @EXT_LINE
C1=VAL(IN$)
RETURN
'
REM
REM MESSAGE: TORPEDO TRACKING
REM
@TRC_MSG
LINE_C=TC_WHITE
LINE$="TORPEDO TRACK:":GOSUB @ADD_LINE
RETURN
'
REM
REM PRINT TORPEDO COORDINATE
REM
@CRD_PRNT
GOSUB @ANIM_TR
GOSUB @SND_TRCK
LINE_C=TC_WHITE
LINE$="    "+STR$(SX+1)+","+STR$(SY+1):GOSUB @ADD_LINE
WAIT 30
RETURN
'
REM
REM MESSAGE: HIT TO KLILIN
REM
@KH_MSG
GOSUB @ANIM_DST
GOSUB @SND_DSTR
LINE_C=TC_YEL
LINE$="* "+KL$+" DESTROYED *":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: HIT TO STAR
REM
@SH_MSG
GOSUB @ANIM_DST
GOSUB @SND_DSTR
LINE_C=TC_YEL
LINE$="* YOU DESTROY A STAR *":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: HIT TO BASE
REM
@BH_MSG
GOSUB @ANIM_DST
GOSUB @SND_DSTR
LINE_C=TC_YEL
LINE$="* STARBASE DESTROYED *":GOSUB @ADD_LINE
LINE$="  ....CONGRATULATIONS":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: MISSED
REM
@MIS_MSG
GOSUB @SND_MISS
LINE_C=TC_YEL
LINE$="  TORPEDO MISSED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM SHIELD CONTROL
REM
@SHIELD
ELINE$="SHIELD":GOSUB @EXT_LINE
IF D(5)>=0 THEN GOSUB @SHI_SET
IF D(5)< 0 THEN GOSUB @SHI_DOWN
RETURN
'
REM
REM MESSAGE: SHIELD DOWN
REM
@SHI_DOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="SHIELD CONTROL":GOSUB @ADD_LINE
LINE$="IS NON-OPERATINAL":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM SET SHIELD ENERGY
REM
@SHI_SET
GOSUB @IN_SHI
IF X<0 THEN GOSUB @CNCL_MSG:RETURN
IF E+S-X<0 THEN GOSUB @SND_BAD:GOTO @SHI_SET
E=E+S-X
S=X
RETURN
'
REM
REM INPUT: SHIELD ENERGY
REM
@IN_SHI
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="SHIELD CONTROL":GOSUB @ADD_LINE
LINE$="ENERGY AVAIL.= "+STR$(E+S):GOSUB @ADD_LINE
LINE$="UNITS TO SHIELDS: ":GOSUB @ADD_LINE
@IN_SHI_L
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN X=-1:RETURN
IF IN$=="" THEN GOSUB @SND_BAD:GOTO @IN_SHI_L
ELINE$=STR$(FLOOR(VAL(IN$)))
GOSUB @EXT_LINE
X=FLOOR(VAL(IN$))
RETURN
'
REM
REM DAMAGE CONTROL
REM
@DAMAGE
ELINE$="DAMAGE":GOSUB @EXT_LINE
IF D(6)>=0 THEN GOSUB @DAM_REP
IF D(6)< 0 THEN GOSUB @DAM_DOWN
RETURN
'
REM
REM MESSAGE: DAMAGE CONTROL IS DOWN
REM
@DAM_DOWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="DAMAGE CONTROL REPORT":GOSUB @ADD_LINE
LINE$="IS NOT AVAILABLE":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM DAMAGE REPORT
REM
@DAM_REP
LINE_C=TC_WHITE
LINE$="":GOSUB @ADD_LINE
LINE$="DEVICE      STATUS":GOSUB @ADD_LINE
FOR R1=0 TO 7
LINE$=D$(R1)+":"+STR$(D(R1)):GOSUB @ADD_LINE
NEXT R1
RETURN
'
REM
REM COMPUTER
REM
@COMP
ELINE$="COMPUTER":GOSUB @EXT_LINE
IF D(7)>=0 THEN GOSUB @PHO_DATA
IF D(7)< 0 THEN GOSUB @COMP_DWN
RETURN
'
REM
REM MESSAGE: COMPUTER IS DOWN
REM
@COMP_DWN
GOSUB @SND_BAD
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="COMPUTER DISABLED":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM PHOTON COURSE DATA
REM
@PHO_DATA
FOR I=0 TO 2
IF K(I,2)<=0 THEN @NEXT_T
C1=S2
A=S1
W1=K(I,1)
X=K(I,0)
GOSUB @CALC_CRS
@NEXT_T
NEXT I
@USE_CALC
GOSUB @IN_CALC
RETURN
'
REM
REM CALC COURSE
REM
@CALC_CRS
X=X-A
A=C1-W1
IF X>0 AND A>=0 THEN GOSUB @REGION1
IF X<=0 AND A>0 THEN GOSUB @REGION2
IF X<0 AND A<=0 THEN GOSUB @REGION3
IF X>=0 AND A<0 THEN GOSUB @REGION4
LINE$="":GOSUB @ADD_LINE
LINE$="DIR.="+STR$(DIR)+", DIST.="+STR$(SQR(X*X+A*A))
GOSUB @ADD_LINE
RETURN
'
REM
REM REGION 1
REM
@REGION1
C1=1
IF ABS(X)> ABS(A) THEN DIR=C1+(ABS(A)/ABS(X))
IF ABS(X)<=ABS(A) THEN DIR=C1+(((ABS(A)-ABS(X))+ABS(A))/ABS(A))
RETURN
'
REM
REM REGION 2
REM
@REGION2
C1=3
IF ABS(X)< ABS(A) THEN DIR=C1+(ABS(X)/ABS(A))
IF ABS(X)>=ABS(A) THEN DIR=C1+(((ABS(X)-ABS(A))+ABS(X))/ABS(X))
RETURN
'
REM
REM REGION 3
REM
@REGION3
C1=5
IF ABS(X)> ABS(A) THEN DIR=C1+(ABS(A)/ABS(X))
IF ABS(X)<=ABS(A) THEN DIR=C1+(((ABS(A)-ABS(X))+ABS(A))/ABS(A))
RETURN
'
REM
REM REGION 4
REM
@REGION4
C1=7
IF ABS(X)< ABS(A) THEN DIR=C1+(ABS(X)/ABS(A))
IF ABS(X)>=ABS(A) THEN DIR=C1+(((ABS(X)-ABS(A))+ABS(X))/ABS(X))
RETURN
'
REM
REM INPUT: USE CALCULATOR
REM
@IN_CALC
LINE$="USE CALCULATOR?":GOSUB @ADD_LINE
LINE$="YES=Х(ENT) / NO=Ф(CNCL)":GOSUB @ADD_LINE
@CAL_LOOP
GOSUB @CHK_BTN
IF BTN_STAT!=TRUE THEN GOSUB @CHK_TCH
IF BTN_STAT!=TRUE THEN GOTO @CAL_LOOP
IF CUR_BTN==BTN_RET THEN BTN_STAT=FALSE:GOSUB @C_INPUT:RETURN
IF CUR_BTN==BTN_CAN THEN GOSUB @CNCL_MSG:RETURN
IF BTN_STAT==TRUE THEN BTN_STAT=FALSE
GOTO @CAL_LOOP
'
REM
REM COURSE INPUT
REM
@C_INPUT
GOSUB @IN_COORD
IF CNCL==TRUE THEN GOSUB @CNCL_MSG:RETURN
GOSUB @CALC_CRS
RETURN
'
REM
REM INPUT: SRC AND DEST COORDINATE
REM
@IN_COORD
LINE$="YOU ARE AT":GOSUB @ADD_LINE
LINE$="QUADRANT ("+STR$(Q1+1)+","+STR$(Q2+1)+")":GOSUB @ADD_LINE
LINE$="SECTOR ("+STR$(S1+1)+","+STR$(S2+1)+")":GOSUB @ADD_LINE
LINE$="INPUT COORDINATES?":GOSUB @ADD_LINE
'  SOURCE X
LINE$="  SOURCE X: ":GOSUB @ADD_LINE
@SRC_X
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN RETURN
A=FLOOR(VAL(IN$))
IF A<1 OR A>8 THEN GOSUB @SND_BAD:GOTO @SRC_X
ELINE$=STR$(A)
GOSUB @EXT_LINE
'  SOURCE Y
LINE$="  SOURCE Y: ":GOSUB @ADD_LINE
@SRC_Y
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN RETURN
C1=FLOOR(VAL(IN$))
IF C1<1 OR C1>8 THEN GOSUB @SND_BAD:GOTO @SRC_Y
ELINE$=STR$(C1)
GOSUB @EXT_LINE
'  DESTINATION X
LINE$="  DEST. X: ":GOSUB @ADD_LINE
@DEST_X
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN RETURN
X=FLOOR(VAL(IN$))
IF X<1 OR X>8 THEN GOSUB @SND_BAD:GOTO @DEST_X
ELINE$=STR$(X)
GOSUB @EXT_LINE
'  DESTINATION Y
LINE$="  DEST. Y: ":GOSUB @ADD_LINE
@DEST_Y
FIXED=FALSE
CNCL=FALSE
IN$=""
GOSUB @GET_VAL
IF CNCL==TRUE THEN RETURN
W1=FLOOR(VAL(IN$))
IF W1<1 OR W1>8 THEN GOSUB @SND_BAD:GOTO @DEST_Y
ELINE$=STR$(W1)
GOSUB @EXT_LINE
'  FROM TO
LINE$="("+STR$(A)+","+STR$(C1)+") → ("+STR$(X)+","+STR$(W1)+")"
GOSUB @ADD_LINE
RETURN
'
REM
REM KLILIN'S ATTACK
REM
@K_ATTACK
IF C$=="DKD" THEN GOSUB @PROTECT:RETURN
IF K3<=0 THEN RETURN
FOR I=0 TO 2
 IF K(I,2)<=0 THEN @NEXT_KA
 DIST=SQR((K(I,0)-S1)*(K(I,0)-S1)+(K(I,1)-S2)*(K(I,1)-S2))
 H=FLOOR((K(I,2)*1.5*(RND(101)+50))/(DIST*100))
 S=S-H
 GOSUB @KA_MSG
 IF S<0 THEN @END_DSTR
 @NEXT_KA
NEXT I
RETURN
'
REM
REM KLILIN'S MOVE
REM
@K_MOVE
IF G_TYPE==K_NOMOVE THEN RETURN
IF K3<1 THEN RETURN
IF FV2==0 THEN GOSUB @KM_MSG
FV2=0
FOR KM=0 TO 2
 IF K(KM,2)<=0 THEN @NEXT_KM
 Q$(K(KM,0),K(KM,1))=SYM__$
 GOSUB @FND_SPC
 K(KM,0)=R1
 K(KM,1)=R2
 Q$(K(KM,0),K(KM,1))=SYM_K$
 @NEXT_KM
NEXT KM
RETURN
'
REM
REM MESSAGE: KLILINS MOVED
REM
@KM_MSG
GOSUB @SND_NTC
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$=KL$
IF K3>1 THEN LINE$=LINE$+"S"
LINE$=LINE$+" MOVED AROUND!":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: BASE PROTECTS ENTERPRIZE
REM
@PROTECT
LINE_C=TC_BLUE
LINE$="":GOSUB @ADD_LINE
LINE$="STARBASE SHIELDS":GOSUB @ADD_LINE
LINE$="PROTECT THE "+EN$:GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM MESSAGE: KLILIN'S ATTACK
REM
@KA_MSG
HX=S1:HY=S2
GOSUB @ANIM_HIT
GOSUB @SND_DAM
LINE_C=TC_RED
LINE$="":GOSUB @ADD_LINE
LINE$=STR$(H)+" UNIT FROM "+STR$(K(I,0)+1)+","+STR$(K(I,1)+1):GOSUB @ADD_LINE
LINE$=" SHIELD LEFT: "+STR$(S):GOSUB @ADD_LINE
LINE_C=TC_WHITE
WAIT 60
RETURN
'
REM
REM KLILIN IS DEAD
REM
@K_DEAD
GOSUB @KD_MSG
K3=K3-1
K9=K9-1
Q$(K(I,0),K(I,1))=SYM__$
G(Q1,Q2)=K3*100+B3*10+S3
IF D(7)>=0 THEN Z(Q1,Q2)=G(Q1,Q2)
IF K3<=0 THEN C$="GRN"
WAIT 30
RETURN
'
REM
REM MESSAGE: KLILIN DESTROYED
REM
@KD_MSG
DX=K(I,0):DY=K(I,1)
GOSUB @ANIM_DST
GOSUB @SND_DSTR
LINE_C=TC_YEL
LINE$=KL$+" AT "+STR$(K(I,0)+1)+","+STR$(K(I,1)+1):GOSUB @ADD_LINE
LINE$=" DESTROYED ****":GOSUB @ADD_LINE
LINE_C=TC_WHITE
RETURN
'
REM
REM GALAXY MAP
REM
@GMAP
GOSUB @GMAP_CMN
IF D(7)>=0 THEN GOSUB @GMAP_PRT
IF D(7)< 0 THEN GOSUB @GMAP_DWN
RETURN
'
REM
REM GALAXY MAP
REM
@GMAP_CMN
COLOR TC_YEL
FOR I=0 TO 7
 LOCATE 2+4*I,2
 PRINT I+1;
 LOCATE 0,3+I
 PRINT I+1;
 LOCATE 1,3+I
 PRINT " "*31;
NEXT I
COLOR TC_WHITE
RETURN
'
REM
REM GALAXY MAP IS NOT AVAILABLE
REM
@GMAP_DWN
COLOR TC_YEL
LOCATE 3,4
PRINT "    COMPUTER IS DOWN";
LOCATE 3,5
PRINT "GALAXY MAP IS NOT AVAILABLE.";
COLOR TC_WHITE
RETURN
'
REM
REM PRINT GALAXY MAP
REM
@GMAP_PRT
FOR J=0 TO 7
 FOR I=0 TO 7
  IF Z(I,J)==0 AND Z(I,J)!=G(I,J) THEN KBS$(0)="*":KBS$(1)="*":KBS$(2)="*":GOTO @PRINT_Q2
  X=G(I,J)
  GOSUB @X2KBS
  @PRINT_Q2
  COLOR TC_WHITE
  IF I==Q1 AND J==Q2 THEN COLOR TC_YEL
  LOCATE 1+4*I,3+J
  PRINT KBS$(0);KBS$(1);KBS$(2);
 NEXT I
NEXT J
RETURN
'
REM
REM MISSION STATUS
REM
@STATUS
IF D(7)>=0 THEN GOSUB @STAT_PRT
IF D(7)< 0 THEN GOSUB @STAT_DWN
RETURN
'
REM
REM STATUS IS NOT AVAILABLE
REM
@STAT_DWN
COLOR TC_WHITE
LOCATE 27,21
PRINT "N/A ";
LOCATE 27,22
PRINT "N/A ";
LOCATE 27,23
PRINT "N/A ";
RETURN
'
REM
REM STATUS OF MISSION
REM
@STAT_PRT
COLOR TC_WHITE
FOR I=0 TO 2
LOCATE 27,21+I
PRINT "    ";
NEXT I
LOCATE 27,21
PRINT K9;
LOCATE 27,22
PRINT B9;
LOCATE 27,23
PRINT (T0+T9)-T;
RETURN
'
REM
REM END: ENTERPRIZE IS DESTROYED
REM
@END_DSTR
DX=S1:DY=S2
GOSUB @ANIM_DST
GOSUB @SND_DSTR
Q$(S1,S2)=SYM__$
GOSUB @SRS
GOSUB @SND_BEND
LINE_C=TC_RED
LINE$="":GOSUB @ADD_LINE
LINE$="THE "+EN$:GOSUB @ADD_LINE
LINE$="  IS DESTROYED.":GOSUB @ADD_LINE
LINE$="THE FEDERATION":GOSUB @ADD_LINE
LINE$=" IS CONQUERED.":GOSUB @ADD_LINE
GOSUB @K_LEFT
LINE_C=TC_WHITE
GOTO @END_CONF
'
REM
REM KLILINS LEFT
REM
@K_LEFT
LINE$="THERE ARE STILL":GOSUB @ADD_LINE
LINE$=STR$(K9)+" "+KL$
IF K9>1 THEN LINE$=LINE$+"S"
LINE$=LINE$+"."
GOSUB @ADD_LINE
RETURN
'
REM
REM END: CANNOT MOVE
REM
@END_STAC
GOSUB @SND_BEND
LINE_C=TC_RED
LINE$="THE "+EN$:GOSUB @ADD_LINE
LINE$=" IS DEAD IN SPACE.":GOSUB @ADD_LINE
LINE$="IF YOU SURVIVE ALL":GOSUB @ADD_LINE
LINE$="IMPENDING ATTACK YOU":GOSUB @ADD_LINE
LINE$="WILL BE DSMOTED TO":GOSUB @ADD_LINE
LINE$="THE RANK OF PRIVATE.":GOSUB @ADD_LINE
LINE_C=TC_WHITE
@STACK1
IF K3<=0 THEN LINE_C=TC_RED:GOSUB @K_LEFT:LINE_C=TC_WHITE:GOTO @END_CONF
GOSUB @K_ATTACK
GOSUB @K_MOVE
GOTO @STACK1
'
REM
REM END: TIME IS OVER
REM
@END_OVER
GOSUB @SND_BEND
LINE_C=TC_RED
LINE$="":GOSUB @ADD_LINE
LINE$="IT IS STARDATE "+STR$(T):GOSUB @ADD_LINE
LINE$="TIME IS OVER":GOSUB @ADD_LINE
GOSUB @K_LEFT
LINE$="THE FEDERATION":GOSUB @ADD_LINE
LINE$=" WILL BE CONQUERED.":GOSUB @ADD_LINE
LINE_C=TC_WHITE
GOTO @END_CONF
'
REM
REM END: COMPLETE THE MISSION
REM
@END_COMP
GOSUB @SRS
WAIT 60
GOSUB @SND_GEND
LINE_C=TC_YEL
LINE$="":GOSUB @ADD_LINE
LINE$="THE LAST "+KL$:GOSUB @ADD_LINE
LINE$=" HAS BEEN DESTROYED.":GOSUB @ADD_LINE
LINE$="THE FEDERATION":GOSUB @ADD_LINE
LINE$=" HAS BEEN SAVED !":GOSUB @ADD_LINE
LINE$="":GOSUB @ADD_LINE
LINE$="YOUR EFFICIENCY":GOSUB @ADD_LINE
LINE$=" RATING = "+STR$(((K7/(T-T0))*1000)):GOSUB @ADD_LINE
TMREAD(TIME$),HOUR,MIN,SEC
T1=MIN+60*HOUR
IF (T1-T7)<0 THEN T1=T1+1440
LINE$="ACTUAL TIME OF MISSION":GOSUB @ADD_LINE
LINE$=" = "+STR$(FLOOR(T1-T7))+" MINUTES":GOSUB @ADD_LINE
LINE_C=TC_WHITE
GOTO @END_CONF
'
REM
REM CONFIRM NEW GAME
REM
@END_CONF
GOSUB @IN_END
IF YESNO==1 THEN @INIT
IF YESNO==0 THEN @CLEAN
GOTO @END_CONF
'
REM
REM INPUT: PLAY AGAIN
REM
@IN_END
LINE_C=TC_WHITE
LINE$="PLAY AGAIN?":GOSUB @ADD_LINE
LINE$="YES=Х(ENT) / NO=Ф(CNCL)":GOSUB @ADD_LINE
@END_LOOP
GOSUB @CHK_BTN
IF BTN_STAT!=TRUE THEN GOSUB @CHK_TCH
IF BTN_STAT!=TRUE THEN @END_LOOP
IF CUR_BTN==BTN_RET THEN BTN_STAT=FALSE:YESNO=1:RETURN
IF CUR_BTN==BTN_CAN THEN BTN_STAT=FALSE:YESNO=0:RETURN
IF BTN_STAT==TRUE THEN BTN_STAT=FALSE
GOTO @END_LOOP
'
REM
REM ABORT
REM
@ABORT
GOSUB @SND_NTC
LINE_C=TC_RED
LINE$="":GOSUB @ADD_LINE
LINE$="DESTRUCT COMMAND":GOSUB @ADD_LINE
LINE$=" IS ACCEPTED.":GOSUB @ADD_LINE
LINE$="ABORT MISSION?":GOSUB @ADD_LINE
LINE_C=TC_WHITE
LINE$="YES=Х(ENT) / NO=Ф(CNCL)":GOSUB @ADD_LINE
@AB_LOOP
GOSUB @CHK_BTN
IF BTN_STAT!=TRUE THEN GOSUB @CHK_TCH
IF BTN_STAT!=TRUE THEN @AB_LOOP
IF CUR_BTN==BTN_RET THEN BTN_STAT=FALSE:GOTO @CLEAN
IF CUR_BTN==BTN_CAN THEN BTN_STAT=FALSE:GOSUB @CNCL_MSG:LINE$="COMMAND :":GOSUB @ADD_LINE:RETURN
IF BTN_STAT==TRUE THEN BTN_STAT=FALSE
GOTO @AB_LOOP
'
REM
REM CLEAN
REM
@CLEAN
BGMSTOP
PNLTYPE "KYA"
GPAGE 1:GCOLOR 0:GCLS
GPAGE 0:GCOLOR 0:GCLS
SPPAGE 1:SPCLR
SPPAGE 0:SPCLR
CHRINIT "SPU2"
CHRINIT "SPU3"
COLOR 0:CLS
CLEAR
END
'
REM
REM INPUT: COMMAND
REM
@IN_COM
GOSUB @CHK_BTN
IF BTN_STAT!=TRUE THEN GOSUB @CHK_TCH
IF BTN_STAT==TRUE THEN COM_N=CUR_BTN:BTN_STAT=FALSE:RETURN
GOTO @IN_COM
'
REM
REM GET INPUT VALUE
REM
@GET_VAL
GOSUB @CHK_BTN
IF BTN_STAT!=TRUE THEN GOSUB @CHK_TCH
IF BTN_STAT==TRUE THEN GOSUB @GET_TXT:BTN_STAT=FALSE
IF FIXED==TRUE THEN GOSUB @CLS_VAL:RETURN
IF CNCL==TRUE THEN GOSUB @CLS_VAL:RETURN
IF MID$(IN$,0,1)=="." THEN IN$="0."
IF LEN(IN$)>5 THEN GOSUB @BS
GOSUB @CLS_VAL
PNLSTR 30-LEN(IN$),1,IN$,TC_WHITE
WAIT 1
GOTO @GET_VAL
'
REM
REM CLEAR INPUT VALUE
REM
@CLS_VAL
PNLSTR 25,1,"     ",TC_WHITE
RETURN
'
REM
REM MESSAGE: COMMAND CANCEL
REM
@CNCL_MSG
LINE_C=TC_WHITE
LINE$="COMMAND CANCELED"
GOSUB @ADD_LINE
RETURN
'
REM
REM GET TEXT
REM
@GET_TXT
IF CUR_BTN>=BTN_7 AND CUR_BTN<=BTN_DOT THEN IN$=IN$+BTNT$(CUR_BTN)
IF CUR_BTN==BTN_BS  THEN GOSUB @BS
IF CUR_BTN==BTN_RET THEN FIXED=TRUE
IF CUR_BTN==BTN_CAN THEN CNCL=TRUE
RETURN
'
REM
REM BACK SPACE
REM
@BS
IN_LEN=LEN(IN$)
IF IN_LEN>0 THEN T$=MID$(IN$,0,IN_LEN-1)
IF IN_LEN<=0 THEN T$=""
IN$=T$
RETURN
'
REM
REM CHECK BUTTON
REM
@CHK_BTN
BTN=BUTTON()
IF BTN==0 THEN RETURN
IF BTN!=0 THEN LST_BTN=CUR_BTN
IF BTN==(BTN_L+BTN_R+BTN_X) THEN GOSUB @ABORT
IF BTN AND BTN_XU THEN CUR_BTN=BTNUDLR(LST_BTN,0)
IF BTN AND BTN_XD THEN CUR_BTN=BTNUDLR(LST_BTN,1)
IF BTN AND BTN_XL THEN CUR_BTN=BTNUDLR(LST_BTN,2)
IF BTN AND BTN_XR THEN CUR_BTN=BTNUDLR(LST_BTN,3)
IF BTN AND BTN_L  THEN CUR_BTN=BTN_WAR
IF BTN AND BTN_R  THEN CUR_BTN=BTN_5
GOSUB @CURSOR
IF BTN AND BTN_A THEN GOSUB @BTN_P:BTN_STAT=TRUE
IF BTN AND BTN_Y THEN CUR_BTN=BTN_RET:GOSUB @CURSOR:GOSUB @BTN_P:BTN_STAT=TRUE
IF BTN AND BTN_X THEN CUR_BTN=BTN_CAN:GOSUB @CURSOR:GOSUB @BTN_P:BTN_STAT=TRUE
WAIT 10
RETURN
'
REM
REM BUTTON PRESSED ACTION
REM
@BTN_P
GOSUB @SND_BTN
PNLSTR BTNTXY(CUR_BTN,0),BTNTXY(CUR_BTN,1),BTNT$(CUR_BTN),TC_WHITE
WAIT 5
PNLSTR BTNTXY(CUR_BTN,0),BTNTXY(CUR_BTN,1),BTNT$(CUR_BTN),TC_BLK
RETURN
'
REM
REM CHECK TOUCHED
REM
@CHK_TCH
IF TCHST!=TRUE THEN RETURN
BTN_STAT=FALSE
FOR I=0 TO BTNNUM-1
 GTLX=BTNXY(I,0)
 GTLY=BTNXY(I,1)
 GW=BTNWH(I,0)
 GH=BTNWH(I,1)
 X1=GTLX*GU
 X2=GTLX*GU+GW*GU-1
 Y1=GTLY*GU
 Y2=GTLY*GU+GH*GU-1
 IF X1<TCHX AND TCHX<X2 AND Y1<TCHY AND TCHY<Y2 THEN LST_BTN=CUR_BTN:CUR_BTN=I:BTN_STAT=TRUE
NEXT I
IF BTN_STAT==FALSE THEN RETURN
GOSUB @CURSOR
GOSUB @BTN_P
WAIT 5
RETURN
'
REM
REM DATA
REM
'
REM
REM TITLE LOGO DATA
REM
@T_DATA
'  S
DATA 40,41,52,41,55,44,55,47,48,51
DATA 48,48,43,48,41,61,53,55,49,85
DATA 46,89,32,89,30,86,31,79,37,76
DATA 37,83,43,83,45,66,32,73,36,46
'  T
DATA 60,41,80,41,79,48,72,48,65,89
DATA 59,89,65,48,59,48
'  A
DATA 87,41,99,41,102,45,95,89,89,89
DATA 92,69,85,71,82,89,76,89,83,46
'  A0
DATA 89,48,95,48,94,60,87,63
'  R
DATA 107,41,122,41,125,44,122,64,116,68
DATA 120,89,114,89,111,72,108,72,106,89
DATA 100,89
'  R0
DATA 112,48,118,48,116,61,110,64
@T_DATA2
'  T
DATA 135,41,155,41,154,48,147,48,140,89
DATA 134,89,140,48,134,48
'  R
DATA 159,41,174,41,177,44,174,64,168,68
DATA 172,89,166,89,163,72,160,72,158,89
DATA 152,89
'  R0
DATA 164,48,170,48,168,61,162,64
'  E
DATA 184,41,200,41,199,48,188,48,187,61
DATA 197,57,196,64,185,69,183,83,193,83
DATA 192,89,176,89
'  K
DATA 204,41,210,41,208,57,210,57,219,41
DATA 224,41,224,43,214,60,215,66,219,89
DATA 213,89,210,70,208,70,205,76,203,89
DATA 197,89
'
REM
REM INSTRUCTIONS DATA
REM
@INST_DAT
DATA 1, "           #TR"
DATA 1, ""
DATA 1, "YOU ARE CAPTAIN OF THE STARSHIP"
DATA 1, "'#EN' WITH A MISSION TO"
DATA 1, "SEEK AND DESTROY A FLEET OF"
DATA 1, "#KL WARSHIPS WHICH ARE"
DATA 1, "MENACING THE UNITED FEDERATION"
DATA 1, "OF PLANETS. YOU HAVE A SPECIFIED"
DATA 1, "NUMBER OF STARDATES(30 YEARS) IN"
DATA 1, "WHICH TO COMPLETE YOUR MISSION."
DATA 1, "YOU ALSO HAVE SOME FEDERATION"
DATA 1, "STARBASE(S) FOR RESUPPLYING"
DATA 1, "YOUR SHIP."
DATA 1, ""
DATA 1, "YOU WILL BE ASSIGNED A STARTING"
DATA 1, "POSITION SOMEWHERE IN THE"
DATA 1, "GALAXY. THE GALAXY IS DEVIDED"
DATA 1, "INTO AN 8x8 QUADRANT GRID."
DATA 1, "EACH QUADRANT IS FURTHER DEVIDED"
DATA 1, "INTO AN 8x8 SECTION GRID."
DATA 1, ""
DATA 1, "IN THE SHORT-RANGE SENSOR,"
DATA 1, "FOLLOWING SYMBOLS ARE USED:"
DATA 1, "  E: #EN"
DATA 1, "  K: #KL"
DATA 1, "  B: STARBASE"
DATA 1, "  *: STAR"
DATA 1, "  .: BLANK SPACE"
DATA 1, ""
DATA 1, "YOU HAVE 7 COMMANDS AVAILABLE"
DATA 1, "TO YOU."
DATA 1, ""
DATA 1, "  WARP: NAVIGATE THE ENTERPRIZE"
DATA 1, "    BY SETTING COURSE AND WARP"
DATA 1, "    ENGINE FACTOR."
DATA 1, "    'COURSE' IS IN A CIRCULAR"
DATA 1, "    NUMERICAL VECTOR ARRANGEMENT"
DATA 1, "    AS SHOWN."
DATA 1, "    INTEGER AND REAL VALUES"
DATA 1, "    MAY BE USED. THEREFORE"
DATA 1, "    COURSE 1.5 IS HALF WAY"
DATA 1, "    BETWEEN 1 AND 2."
DATA 1, ""
DATA 1, "       4  3  2"
DATA 1, "         | /"
DATA 1, "      5 ----- 1"
DATA 1, "        / | "
DATA 1, "       6  7  8"
DATA 1, ""
DATA 1, "       COURSE"
DATA 1, ""
DATA 1, "  LRS: LONG-RANGE SENSOR SCAN"
DATA 1, "    SHOWS CONDITIONS IN SPACE"
DATA 1, "    FOR ONE QUADRANT ON EACH"
DATA 1, "    SIDE OF THE #EN IN"
DATA 1, "    THE MIDDLE OF THE SCAN."
DATA 1, "    THE SCAN IS CODED IN THE"
DATA 1, "    FORM XXX, WHERE THE UNITS"
DATA 1, "    DIGIT IS THE NUMBER OF"
DATA 1, "    STARS, THE TENS DIGIT IS THE"
DATA 1, "    NUMBER OF STARBASES, THE"
DATA 1, "    HUNDREDS DIGIT IS THE NUMBER"
DATA 1, "    OF #KL. SCANNED AREA IS"
DATA 1, "    RECORDED TO COMPUTER AND"
DATA 1, "    SHOWN TO GALAXY MAP."
DATA 1, ""
DATA 1, "  PHASER: PHASER CONTROL"
DATA 1, "    ALLOWS YOU TO DESTROY"
DATA 1, "    THE #KLS BY HITTING HIM"
DATA 1, "    WITH SUITABLY LARGE NUMBERS"
DATA 1, "    OF ENERGY UNITS TO DEPLETE"
DATA 1, "    HIS SHIELD POWER. KEEP IN"
DATA 1, "    MIND THAT WHEN YOU SHOOT AT"
DATA 1, "    HIM, HE GONNA DO IT TO YOU"
DATA 1, "    TOO."
DATA 1, ""
DATA 1, "  TORPEDO: PHOTON TORPEDO"
DATA 1, "    COURSE IS THE SAME AS USED"
DATA 1, "    IN WARP ENGINE CONTROL."
DATA 1, "    IF YOU HIT THE #KL,"
DATA 1, "    HE IS DESTROYED AND CANNOT"
DATA 1, "    FIRE BWCK AT YOU."
DATA 1, "    IF YOU MISS, HE WILL SHOOT"
DATA 1, "    HIS PHASERS AT YOU."
DATA 1, "    NOTE: THE LIBRARY COMPUTER"
DATA 1, "    HAS AN OPTION TO COMPUTE"
DATA 1, "    TORPEDO TRAJECTORY FOR YOU."
DATA 1, ""
DATA 1, "  SHIELD: SHIELD CONTROL"
DATA 1, "    DEFINES NUMBER OF ENERGY"
DATA 1, "    UNITS TO BE ASSIGNED TO"
DATA 1, "    SHIELDS. ENERGY IS TAKEN"
DATA 1, "    FROM TOTAL SHIP'S ENERGY."
DATA 1, ""
DATA 1, "  DAMAGE: DAMAGE REPORT"
DATA 1, "    GIVES STATE OF REPAIRS OF"
DATA 1, "    ALL DEVICES. A STATE OF"
DATA 1, "    REPAIR LESS THAN ZERO SHOWS"
DATA 1, "    THAT DEVICE IS TEMPORARY"
DATA 1, "    DAMAGED."
DATA 1, ""
DATA 1, "  COMPUTER: COMPUTER CAN"
DATA 1, "    CALCULATE COURSE FOR WARP"
DATA 1, "    AND TORPEDO."
DATA 1, "    IT ALSO RECORDS LONG-RANGE"
DATA 1, "    SENSOR SCAN RESULT AS THE"
DATA 1, "    GALAXY MAP AND KEEP STATUS"
DATA 1, "    OF YOUR MISSION."
DATA 1, ""
DATA 1, "YOU CAN SELECT #KL'S "
DATA 1, "BEHAVIOR."
DATA 1, "А: #KLS ARE NON-STATIONARY"
DATA 1, "  WITHIN THEIR QUADRANT. IF YOU"
DATA 1, "  TRY TO MANEUVER ON THEM, THEY"
DATA 1, "  WILL MOVE AND FIRE ON YOU."
DATA 1, "Б: #KLS ARE STATIC WHILE YOU"
DATA 1, "  ARE STAYING IN THE QUADRANT."
DATA 1, ""
DATA 1, "WHILE YOU ARE DOCKED AT A"
DATA 1, "STARBASE, A TEAM OF TECHNICIANS"
DATA 1, "CAN REPAIR THE #EN."
DATA 1, ""
DATA 1, "  -- END OF INSTRUCTIONS --"
DATA 0
'
REM
REM BUTTON DATA
REM
@BTNDATA
'  COMMAND BUTTONS
DATA  0,18,8,3,8,"WARP"  , 2,19,20,4,0,1
DATA  8,18,8,3,8,"LRS"   ,10,19,20,5,0,2
DATA 16,18,8,3,8,"PHASER",17,19,20,6,1,3
DATA 24,18,8,3,8,"PHOTON",25,19,20,7,2,3
DATA  0,21,8,3,8,"SHIELD", 1,22, 0,4,4,5
DATA  8,21,8,3,8,"DAMAGE", 9,22, 1,5,4,6
DATA 16,21,8,3,8,"COMP." ,17,22, 2,6,5,7
DATA 24,21,8,3,7,"CANCEL",25,22, 3,7,6,7
'  NUMBER BUTTONS
DATA 23, 2,3,3,8,"7",24, 3, 8,11, 8, 9
DATA 26, 2,3,3,8,"8",27, 3, 9,12, 8,10
DATA 29, 2,3,3,8,"9",30, 3,10,13, 9,10
DATA 23, 5,3,3,8,"4",24, 6, 8,14,11,12
DATA 26, 5,3,3,8,"5",27, 6, 9,15,11,13
DATA 29, 5,3,3,8,"6",30, 6,10,16,12,13
DATA 23, 8,3,3,8,"1",24, 9,11,17,14,15
DATA 26, 8,3,3,8,"2",27, 9,12,18,14,16
DATA 29, 8,3,3,8,"3",30, 9,13,19,15,16
DATA 23,11,3,3,8,"0",24,12,14,20,17,18
DATA 26,11,3,3,8,".",27,12,15,20,17,19
DATA 29,11,3,3,7,"←",30,12,16,20,18,19
'  ENTER BUTTON
DATA 23,14,9,3,7,"ENTER",25,15,18,3,20,20
'
REM
REM GAME DATA
REM
'
@COURSE
DATA 1,0, 1,-1, 0,-1, -1,-1, -1,0, -1,1, 0,1, 1,1, 1,0
'
@DEV_NAME
DATA "WARP ENGINES","S.R. SENSORS","L.R. SENSORS","PHASER CNTRL"
DATA "PHOTON TUBE ","SHIELD CNTRL","DAMAGE CNTRL","COMPUTER    "
'
@SRS_LBL
DATA "STARDATE","COND.   ","QUADRANT","SECTOR  "
DATA "ENERGY  ","PHOTON  ","SHIELDS ","#KL"
DATA "STARBASE","LEFTYEAR"
'
REM
REM SOUND
REM
'
REM
REM SOUND: WARP
REM
@SND_WARP
WAIT 10
BEEP 0,PITCH
WAIT 4
BEEP 0,PITCH*8
WAIT 4
BEEP 0,PITCH*12
WAIT 4
BEEP 0,PITCH
WAIT 4
BEEP 0,PITCH*8
WAIT 4
BEEP 0,PITCH*12
WAIT 30
RETURN
'
REM
REM SOUND: WARNING
REM
@SND_WARN
WAIT 10
BEEP 0,PITCH*12
WAIT 5
BEEP 0,PITCH*12
WAIT 20
BEEP 0,PITCH
WAIT 10
BEEP 0,PITCH*12
WAIT 5
BEEP 0,PITCH*12
WAIT 20
BEEP 0,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: NOTICE
REM
@SND_NTC
WAIT 10
BEEP 0,PITCH*12
WAIT 5
BEEP 0,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: DOCKED
REM
@SND_DCK
WAIT 10
BEEP 0,PITCH*8
WAIT 4
BEEP 0,PITCH*12
WAIT 4
BEEP 0,PITCH*8
WAIT 30
RETURN
'
REM
REM SOUND: SOMETHING WRONG
REM
@SND_BAD
WAIT 10
BEEP 0,PITCH
WAIT 5
BEEP 0,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: DAMAGED
REM
@SND_DAM
WAIT 10
BEEP 0,PITCH
WAIT 5
BEEP 0,-PITCH*7
WAIT 30
RETURN
'
REM
REM SOUND: IMPROVED
REM
@SND_IMP
WAIT 10
BEEP 0,PITCH
WAIT 5
BEEP 0,PITCH*8
WAIT 30
RETURN
'
REM
REM SOUND: HIT KLILIN
REM
@SND_HIT
WAIT 10
BEEP 11,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: DESTROY SOMETHING
REM
@SND_DSTR
WAIT 10
BEEP 13,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: TRACK
REM
@SND_TRCK
BEEP 0,PITCH*24
RETURN
'
REM
REM SOUND: MISS
REM
@SND_MISS
WAIT 10
BEEP 0,PITCH
WAIT 5
BEEP 0,PITCH
WAIT 30
RETURN
'
REM
REM SOUND: BAD END
REM
@SND_BEND
BGMPLAY 6
RETURN
'
REM
REM SOUND: GOOD END
REM
@SND_GEND
BGMPLAY 9
RETURN
'
REM
REM SOUND: BUTTON PRESSED
REM
@SND_BTN
BEEP 49,PITCH*24
RETURN
'
REM
REM ANIMATION: HIT
REM
@ANIM_HIT
IF D(1)<0 THEN RETURN
SPOFS SP_HIT,(2+2*HX)*GU-GU/2,(15+HY)*GU-GU/2
SPANIM SP_HIT,3,15,1
RETURN
'
REM
REM ANIMATION: TORPEDO TRACK
REM
@ANIM_TR
IF D(1)<0 THEN RETURN
SPOFS SP_TOR,(2+2*SX)*GU-GU/2,(15+SY)*GU-GU/2
SPANIM SP_TOR,3,15,1
RETURN
'
REM
REM ANIMATION: DESTROY
REM
@ANIM_DST
IF D(1)<0 THEN RETURN
SPOFS SP_BOMB,(2+2*DX)*GU-GU/2,(15+DY)*GU-GU/2
SPANIM SP_BOMB,8,3,1
RETURN
